#pragma once

#include "bvm/instructions.hpp"

namespace BVM
{
    constexpr InstructionFunc InstructionTable[256] =
	{
		Exit,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		PushWord,
		PushWord0,
		PushWord1,
		PushWord2,
		PushWord3,
		PushDWord,
		PushDWord0,
		PushDWord1,
		PushDWord2,
		PushDWord3,
		PushWords,

		PushWordValue0,
		PushDWordValue0,
		PushI32_1,
		PushI32_2,
		PushI64_1,
		PushI64_2,
		PushF32_1,
		PushF32_2,
		PushF64_1,
		PushF64_2,

		PushI8AsI32,
		PushI8AsI64,
		PushWordFromPool,
		PushWordFromPoolWide,
		PushDWordFromPool,
		PushDWordFromPoolWide,
		PushStringFromPool,
		PushStringFromPoolWide,

		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		PopWord,
		PopWord0,
		PopWord1,
		PopWord2,
		PopWord3,
		PopDWord,
		PopDWord0,
		PopDWord1,
		PopDWord2,
		PopDWord3,
		PopWords,

		DupWord,
		DupWordX1,
		DupWordX2,
		DupDWord,
		DupDWordX1,
		DupDWordX2,
		SwapWord,
		SwapDWord,

		GetAddress,
		LoadByte0,
		LoadByte1,
		LoadByte2,
		LoadByte3,
		LoadHWord0,
		LoadHWord2,
		LoadWord,
		LoadDWord,
		StoreByte0,
		StoreByte1,
		StoreByte2,
		StoreByte3,
		StoreHWord0,
		StoreHWord2,
		StoreWord,
		StoreDWord,

		AddI32,
		AddI64,
		AddF32,
		AddF64,
		IncI32,
		IncI64,
		IncF32,
		IncF64,

		SubI32,
		SubI64,
		SubF32,
		SubF64,
		DecI32,
		DecI64,
		DecF32,
		DecF64,

		MulI32,
		MulU32,
		MulI64,
		MulU64,
		MulF32,
		MulF64,

		DivI32,
		DivU32,
		DivI64,
		DivU64,
		DivF32,
		DivF64,

		ModI32,
		ModU32,
		ModI64,
		ModU64,
		ModF32,
		ModF64,

		NegI32,
		NegI64,
		NegF32,
		NegF64,

		AndWord,
		AndDWord,
		OrWord,
		OrDWord,
		XorWord,
		XorDWord,
		NotWord,
		NotDWord,
		ShlWord,
		ShlDWord,
		ShrI32,
		ShrU32,
		ShrI64,
		ShrU64,

		CmpEqWord,
		CmpEqDWord,
		CmpNeWord,
		CmpNeDWord,
		CmpLtI32,
		CmpGtI32,
		CmpLeI32,
		CmpGeI32,
		CmpLtI64,
		CmpGtI64,
		CmpLeI64,
		CmpGeI64,
		CmpLtF32,
		CmpGtF32,
		CmpLeF32,
		CmpGeF32,
		CmpLtF64,
		CmpGtF64,
		CmpLeF64,
		CmpGeF64,
		CmpLtU32,
		CmpGtU32,
		CmpLeU32,
		CmpGeU32,
		CmpLtU64,
		CmpGtU64,
		CmpLeU64,
		CmpGeU64,

		JumpIf,
		Jmp,

		NotImplemented,
		NotImplemented,
		NotImplemented,

		Call,
		NotImplemented, // call ext (not implemented)
		SysCall,
		ReturnVoid,
		ReturnWord,
		ReturnDWord,
		ReturnWords,

		I32ToI8,
		I32ToI16,
		I32ToI64,
		I32ToF32,
		I32ToF64,
		I64ToI32,
		I64ToF32,
		I64ToF64,
		F32ToI32,
		F32ToI64,
		F32ToF64,
		F64ToI32,
		F64ToI64,
		F64ToF32,

		Alloc,
		Free,

		LoadWords,
		StoreWords,

		LoadBufferByteVal,
		LoadBufferHWordVal,
		LoadBufferWordVal,
		LoadBufferDWordVal,
		LoadBufferWordsVal,

		LoadBufferByteRef,
		LoadBufferHWordRef,
		LoadBufferWordRef,
		LoadBufferDWordRef,
		LoadBufferWordsRef,

		StoreBufferByte,
		StoreBufferHWord,
		StoreBufferWord,
		StoreBufferDWord,
		StoreBufferWords,

		LoadOffsetByte0,
		LoadOffsetByte1,
		LoadOffsetByte2,
		LoadOffsetByte3,
		LoadOffsetHWord0,
		LoadOffsetHWord2,
		LoadOffsetWord,
		LoadOffsetDWord,
		LoadOffsetWords,

		StoreOffsetByte0,
		StoreOffsetByte1,
		StoreOffsetByte2,
		StoreOffsetByte3,
		StoreOffsetHWord0,
		StoreOffsetHWord2,
		StoreOffsetWord,
		StoreOffsetDWord,
		StoreOffsetWords,

		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
		NotImplemented,
	};
} // namespace BVM
